{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "HeartSound1dCNN.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "7JeAZux4Begd"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nol0VfOHWGH_"
      },
      "source": [
        "#1D CNN"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "snhwJVbJWiUO"
      },
      "source": [
        "\n",
        "\n",
        "\n",
        "from matplotlib import pyplot\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler \n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import Flatten\n",
        "from keras import models, layers\n",
        "from keras.layers import Dropout\n",
        "from keras.layers.convolutional import Conv1D\n",
        "from keras.layers.convolutional import MaxPooling1D\n",
        "#from keras.utils import to_categorical\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from keras.layers import GlobalAveragePooling1D\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ylf8VO5GW0B7",
        "outputId": "8c02d93d-df7f-40ca-98bd-2e7438508f8e"
      },
      "source": [
        "X = np.load('/content/feat.npy') \n",
        "y = np.load('/content/label.npy').ravel() \n",
        "\n",
        "#Split data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "X_train.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(84, 193)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p7ghYoqCXSSX",
        "outputId": "a10f711c-ff88-4cfe-f068-dcf8c65c447f"
      },
      "source": [
        "X_train_cnn = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n",
        "X_valid_cnn = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n",
        "\n",
        "print(X_train_cnn.shape)\n",
        "print(X_valid_cnn.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(84, 193, 1)\n",
            "(21, 193, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3fU72Df-ZgDn"
      },
      "source": [
        "model = Sequential()\n",
        "model.add(Conv1D(64, 3, activation='relu', input_shape=(193, 1)))\n",
        "model.add(Conv1D(64, 3, activation='relu'))\n",
        "model.add(MaxPooling1D(3))\n",
        "model.add(Conv1D(128, 3, activation='relu'))\n",
        "model.add(Conv1D(128, 3, activation='relu'))\n",
        "model.add(GlobalAveragePooling1D())\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(3, activation='softmax'))\n",
        "model.compile(loss='sparse_categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h4C0UzKK0ZCN",
        "outputId": "8823638a-4ea8-488e-c10b-24350aa8398f"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv1d_8 (Conv1D)            (None, 191, 64)           256       \n",
            "_________________________________________________________________\n",
            "conv1d_9 (Conv1D)            (None, 189, 64)           12352     \n",
            "_________________________________________________________________\n",
            "max_pooling1d_2 (MaxPooling1 (None, 63, 64)            0         \n",
            "_________________________________________________________________\n",
            "conv1d_10 (Conv1D)           (None, 61, 128)           24704     \n",
            "_________________________________________________________________\n",
            "conv1d_11 (Conv1D)           (None, 59, 128)           49280     \n",
            "_________________________________________________________________\n",
            "global_average_pooling1d_2 ( (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "dropout_2 (Dropout)          (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 3)                 387       \n",
            "=================================================================\n",
            "Total params: 86,979\n",
            "Trainable params: 86,979\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6OK7DrRmZn_A",
        "outputId": "7862ac04-a8f7-4b6c-ec11-6d95caee1867"
      },
      "source": [
        "history = model.fit(X_train_cnn, y_train,batch_size=42, epochs= 10,validation_data=(X_valid_cnn, y_test), verbose = 1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "2/2 [==============================] - 1s 269ms/step - loss: 1.4537 - accuracy: 0.3452 - val_loss: 0.9566 - val_accuracy: 0.3333\n",
            "Epoch 2/10\n",
            "2/2 [==============================] - 0s 78ms/step - loss: 1.0279 - accuracy: 0.4286 - val_loss: 0.9176 - val_accuracy: 0.3333\n",
            "Epoch 3/10\n",
            "2/2 [==============================] - 0s 78ms/step - loss: 1.0527 - accuracy: 0.4643 - val_loss: 0.9041 - val_accuracy: 0.3333\n",
            "Epoch 4/10\n",
            "2/2 [==============================] - 0s 90ms/step - loss: 1.0184 - accuracy: 0.5238 - val_loss: 0.9391 - val_accuracy: 0.3333\n",
            "Epoch 5/10\n",
            "2/2 [==============================] - 0s 82ms/step - loss: 0.9644 - accuracy: 0.4286 - val_loss: 0.8528 - val_accuracy: 0.5714\n",
            "Epoch 6/10\n",
            "2/2 [==============================] - 0s 84ms/step - loss: 0.9247 - accuracy: 0.5952 - val_loss: 0.8400 - val_accuracy: 0.5714\n",
            "Epoch 7/10\n",
            "2/2 [==============================] - 0s 79ms/step - loss: 0.8811 - accuracy: 0.6310 - val_loss: 0.8267 - val_accuracy: 0.4762\n",
            "Epoch 8/10\n",
            "2/2 [==============================] - 0s 77ms/step - loss: 0.8538 - accuracy: 0.6429 - val_loss: 0.7889 - val_accuracy: 0.5714\n",
            "Epoch 9/10\n",
            "2/2 [==============================] - 0s 72ms/step - loss: 0.8064 - accuracy: 0.6310 - val_loss: 1.0952 - val_accuracy: 0.5238\n",
            "Epoch 10/10\n",
            "2/2 [==============================] - 0s 87ms/step - loss: 0.8820 - accuracy: 0.5119 - val_loss: 0.7630 - val_accuracy: 0.6190\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jWrS8zLJ0r-y",
        "outputId": "46f2fb83-efb9-4f8d-cd8b-2d5f712b0c37"
      },
      "source": [
        "scores = model.evaluate(X_valid_cnn, y_test, verbose=1)\n",
        "print('Test loss:', scores[0])\n",
        "print('Test accuracy:', scores[1])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 24ms/step - loss: 0.7630 - accuracy: 0.6190\n",
            "Test loss: 0.7629647254943848\n",
            "Test accuracy: 0.6190476417541504\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "rj17f1G30tsK",
        "outputId": "38fe4608-a8ca-4906-df86-a41d683a5411"
      },
      "source": [
        "print(history.history.keys())\n",
        "# summarize history for accuracy\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "# summarize history for loss\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}